vto = glue::glue("shiny::verbatimTextOutput(ns('{id}'))"),
col = glue::glue("# UI ----\nns <- shiny::NS(id)\nshiny::column(\nwidth = 12,\n shiny::tags$code('{id}'),\nshiny::verbatimTextOutput(ns('{id}'))
)"),
flr = glue::glue("{id}"))
} else {
}
}
prnt_rvals(type = "ui", "dev", "flr")
prnt_rvals <- function(id, type = "ui", level) {
id <- id
if (type == "ui") {
switch(level,
vto = glue::glue("shiny::verbatimTextOutput(ns('{id}'))"),
col = glue::glue("# UI ----\nns <- shiny::NS(id)\nshiny::column(\nwidth = 12,\n shiny::tags$code('{id}'),\nshiny::verbatimTextOutput(ns('{id}'))
)"),
flr = glue::glue("{id}"))
}
}
prnt_rvals(type = "ui", "dev", "flr")
prnt_rvals <- function(id, type = "ui", level) {
id <- id
if (type == "ui") {
switch(level,
vto = glue::glue("shiny::verbatimTextOutput(ns('{id}'))"),
col = glue::glue("# UI ----\nns <- shiny::NS(id)\nshiny::column(\nwidth = 12,\n shiny::tags$code('{id}'),\nshiny::verbatimTextOutput(ns('{id}'))
)"),
flr = glue::glue("{id}"))
}
}
prnt_rvals(type = "ui", "dev", "flr")
prnt_rvals(type = "ui", "dev", "vto")
prnt_rvals <- function(id, type = "ui", level) {
id <- id
if (type == "ui") {
switch(level,
vto = glue::glue("shiny::verbatimTextOutput(ns('{id}'))"),
col = glue::glue("# UI ----\nns <- shiny::NS(id)\nshiny::column(\nwidth = 12,\n shiny::tags$code('{id}'),\nshiny::verbatimTextOutput(ns('{id}'))
)"),
flr = glue::glue("{id}"))
}
}
prnt_rvals(type = "ui", "dev", "vto")
prnt_rvals(type = "ui", "dev", "flr")
prnt_rvals(type = "ui", "dev", "col")
prnt_rvals <- function(id, type = "ui", level) {
id <- id
if (type == "ui") {
switch(level,
vto = glue::glue("shiny::verbatimTextOutput(NS(namespace = id, id = '{id}'))"),
col = glue::glue("# UI ----\nns <- shiny::NS(id)\nshiny::column(\nwidth = 12,\n shiny::tags$code('{id}'),\nshiny::verbatimTextOutput(NS(namespace = id, id = '{id}'))
)"),
flr = glue::glue("shiny::fluidRow(\n\tshiny::column(width = 12,\n\t\tshiny::verbatimTextOutput(NS(namespace = id, id = '{id}'))\n\t\t)\n\t)"))
}
}
prnt_rvals(type = "ui", "dev", "col")
prnt_rvals <- function(id, type = "ui", level) {
id <- id
if (type == "ui") {
switch(level,
vto = glue::glue("shiny::verbatimTextOutput(NS(namespace = id, id = '{id}'))"),
col = glue::glue("# UI ----\nns <- shiny::NS(id)\n\tshiny::column(\n\t\twidth = 12,\n\t\tshiny::verbatimTextOutput(NS(namespace = id, id = '{id}'))
)"),
flr = glue::glue("shiny::fluidRow(\n\tshiny::column(width = 12,\n\t\tshiny::verbatimTextOutput(NS(namespace = id, id = '{id}'))\n\t\t)\n\t)"))
}
}
prnt_rvals(type = "ui", "dev", "col")
prnt_rvals <- function(id, type = "ui", level) {
id <- id
if (type == "ui") {
switch(level,
vto = glue::glue("shiny::verbatimTextOutput(NS(namespace = id, id = '{id}'))"),
col = glue::glue("# UI ----\n\nshiny::column(\n\t\twidth = 12,\n\t\tshiny::verbatimTextOutput(NS(namespace = id, id = '{id}'))
)"),
flr = glue::glue("shiny::fluidRow(\n\tshiny::column(width = 12,\n\t\tshiny::verbatimTextOutput(NS(namespace = id, id = '{id}'))\n\t\t)\n\t)"))
}
}
prnt_rvals(type = "ui", "dev", "col")
prnt_rvals <- function(id, type = "ui", level) {
id <- id
if (type == "ui") {
switch(level,
vto = glue::glue("shiny::verbatimTextOutput(NS(namespace = id, id = '{id}'))"),
col = glue::glue("# UI ----\n\nshiny::column(\n\twidth = 12,\n\t\tshiny::verbatimTextOutput(NS(namespace = id, id = '{id}'))
)"),
flr = glue::glue("shiny::fluidRow(\n\tshiny::column(width = 12,\n\t\tshiny::verbatimTextOutput(NS(namespace = id, id = '{id}'))\n\t\t)\n\t)"))
}
}
prnt_rvals(type = "ui", "dev", "col")
prnt_rvals <- function(id, type = "ui", level) {
id <- id
if (type == "ui") {
switch(level,
vto = glue::glue("shiny::verbatimTextOutput(NS(namespace = id, id = '{id}'))"),
col = glue::glue("# UI ----\n\nshiny::column(\n\twidth = 12,\n\t\tshiny::verbatimTextOutput(NS(namespace = id, id = '{id}'))
)"),
flr = glue::glue("shiny::fluidRow(\n\tshiny::column(width = 12,\n\tshiny::verbatimTextOutput(NS(namespace = id, id = '{id}'))\n\t\t)\n\t)"))
}
}
prnt_rvals(type = "ui", "dev", "col")
prnt_rvals(type = "ui", "dev", "flr")
prnt_rvals <- function(id, type = "ui", level) {
id <- id
if (type == "ui") {
switch(level,
vto = glue::glue("shiny::verbatimTextOutput(NS(namespace = id, id = '{id}'))"),
col = glue::glue("# UI ----\n\nshiny::column(\n\twidth = 12,\n\t\tshiny::verbatimTextOutput(NS(namespace = id, id = '{id}'))
)"),
flr = glue::glue("shiny::fluidRow(\n\t\tshiny::column(width = 12,\n\t\t\tshiny::verbatimTextOutput(NS(namespace = id, id = '{id}'))\n\t\t)\n\t)"))
}
}
prnt_rvals(type = "ui", "dev", "flr")
prnt_rvals <- function(id, type = "ui", level) {
id <- id
if (type == "ui") {
switch(level,
vto = glue::glue("# UI ----\n\nshiny::verbatimTextOutput(NS(namespace = id, id = '{id}'))"),
col = glue::glue("# UI ----\n\nshiny::column(\n\twidth = 12,\n\t\tshiny::verbatimTextOutput(NS(namespace = id, id = '{id}'))
)"),
flr = glue::glue("# UI ----\n\nshiny::fluidRow(\n\t\tshiny::column(width = 12,\n\t\t\tshiny::verbatimTextOutput(NS(namespace = id, id = '{id}'))\n\t\t)\n\t)"))
} else {
}
}
prnt_rvals(type = "ui", "dev", "flr")
prnt_rvals <- function(id, type = "ui", level) {
id <- id
if (type == "ui") {
switch(level,
vto = glue::glue("# UI ----\n\nshiny::verbatimTextOutput(NS(namespace = id, id = '{id}'))"),
col = glue::glue("# UI ----\n\nshiny::column(\n\twidth = 12,\n\t\tshiny::verbatimTextOutput(NS(namespace = id, id = '{id}'))
)"),
flr = glue::glue("# UI ----\n\nshiny::fluidRow(\n\tshiny::column(width = 12,\n\t\tshiny::verbatimTextOutput(NS(namespace = id, id = '{id}'))\n\t)\n\t)"))
} else {
}
}
prnt_rvals(type = "ui", "dev", "flr")
prnt_rvals <- function(id, type = "ui", level) {
id <- id
if (type == "ui") {
switch(level,
vto = glue::glue("# UI ----\n\nshiny::verbatimTextOutput(NS(namespace = id, id = '{id}'))"),
col = glue::glue("# UI ----\n\nshiny::column(\n\twidth = 12,\n\t\tshiny::verbatimTextOutput(NS(namespace = id, id = '{id}'))
)"),
flr = glue::glue("# UI ----\n\nshiny::fluidRow(\n\tshiny::column(width = 12,\n\t\tshiny::verbatimTextOutput(NS(namespace = id, id = '{id}'))\n\t\t)\n\t)"))
} else {
}
}
prnt_rvals(type = "ui", "dev", "flr")
prnt_rvals <- function(id, type = "ui", level) {
id <- id
if (type == "ui") {
switch(level,
vto = glue::glue("# UI ----\n\nshiny::verbatimTextOutput(NS(namespace = id, id = '{id}'))"),
col = glue::glue("# UI ----\n\nshiny::column(\n\twidth = 12,\n\t\tshiny::verbatimTextOutput(NS(namespace = id, id = '{id}'))
)"),
flr = glue::glue("# UI ----\nshiny::fluidRow(\n\tshiny::column(width = 12,\n\t\tshiny::verbatimTextOutput(NS(namespace = id, id = '{id}'))\n\t\t)\n\t)"))
} else {
}
}
prnt_rvals(type = "ui", "dev", "flr")
prnt_rvals(id = "dev", level = "flr")
test_glue <- function(id) {
ui <- "# UI ----\n\nshiny::verbatimTextOutput(NS(namespace = id, id = '{id}'))"
server <- "output$dev <- renderPrint({\nvals <- reactiveValuesToList(x = input, all.names = TRUE)\nprint(vals)\n})"
glue::glue(ui, server)
}
test_glue("dev")
test_glue <- function(id) {
ui <- "# UI ----\n\nshiny::verbatimTextOutput(NS(namespace = id, id = '{id}'))"
server <- "output$dev <- renderPrint(\{\nvals <- reactiveValuesToList(x = input, all.names = TRUE)\nprint(vals)\n\})"
test_glue("dev")
test_glue <- function(id) {
ui <- "# UI ----\n\nshiny::verbatimTextOutput(NS(namespace = id, id = '{id}'))"
server <- "output$dev <- renderPrint({{\nvals <- reactiveValuesToList(x = input, all.names = TRUE)\nprint(vals)\n}})"
glue::glue(ui, server)
}
test_glue("dev")
test_glue <- function(id) {
ui <- "# UI ----
shiny::verbatimTextOutput(NS(namespace = id, id = '{id}'))"
server <- "output$dev <- renderPrint({{
nvals <- reactiveValuesToList(x = input, all.names = TRUE)
print(vals)
}})"
glue::glue(ui, server)
}
test_glue("dev")
test_glue <- function(id) {
ui <- "# UI ----
shiny::verbatimTextOutput(NS(namespace = id, id = '{id}'))"
server <- "\n\noutput$dev <- renderPrint({{
nvals <- reactiveValuesToList(x = input, all.names = TRUE)
print(vals)
}})"
glue::glue(ui, server)
}
test_glue("dev")
test_glue <- function(id) {
ui <- "# UI ----
shiny::verbatimTextOutput(NS(namespace = id, id = '{id}'))"
server <- "\n\noutput$dev <- renderPrint({{
nvals <- reactiveValuesToList(x = input, all.names = TRUE)
print(vals)
}})"
rstudioapi::insertText(glue::glue(ui, server))
}
test_glue("dev")
test_glue <- function(id) {
ui <- "# UI ----
shiny::verbatimTextOutput(NS(namespace = id, id = '{id}'))"
server <- "\n\n# server ----output$dev <- renderPrint({{
nvals <- reactiveValuesToList(x = input, all.names = TRUE)
print(vals)
}})"
rstudioapi::insertText(glue::glue(ui, server))
}
test_glue("dev")
test_glue <- function(id) {
ui <- "# UI ----
shiny::verbatimTextOutput(NS(namespace = id, id = '{id}'))"
server <- "\n\n# server ----
output$dev <- renderPrint({{
nvals <- reactiveValuesToList(x = input, all.names = TRUE)
print(vals)
}})"
rstudioapi::insertText(glue::glue(ui, server))
}
test_glue("dev")
test_glue <- function(id) {
ui <- "# UI ----
shiny::verbatimTextOutput(NS(namespace = id, id = '{id}'))"
server <- "\n\n# server ----
output$dev <- renderPrint({{
nvals <- reactiveValuesToList(x = input, all.names = TRUE)
print(vals)
}})\n\n"
rstudioapi::insertText(glue::glue(ui, server))
}
test_glue("dev")
test_glue("dev")
test_glue <- function(id) {
ui <- "\n\n# UI ----
shiny::verbatimTextOutput(NS(namespace = id, id = '{id}'))"
server <- "\n\n# server ----
output$dev <- renderPrint({{
nvals <- reactiveValuesToList(x = input, all.names = TRUE)
print(vals)
}})\n\n"
rstudioapi::insertText(glue::glue(ui, server))
}
test_glue("dev")
prnt_rvals <- function(id) {
ui <- "\n\n# put in UI ----
shiny::verbatimTextOutput(NS(namespace = id, id = '{id}'))"
server <- "\n\n# put in server ----
output$dev <- renderPrint({{
nvals <- reactiveValuesToList(x = input, all.names = TRUE)
print(vals)
}})\n\n"
rstudioapi::insertText(glue::glue(ui, server))
}
prnt_rvals("dev")
prnt_rvals <- function(id) {
ui <- "\n\n# put in UI ----
shiny::verbatimTextOutput(NS(namespace = id, id = '{id}'))"
server <- "\n\n# put in server ----
output$dev <- renderPrint({{
nvals <- reactiveValuesToList(x = input, all.names = TRUE)
print(vals)
}})\n\n"
rstudioapi::insertText(glue::glue(ui, server))
}
prnt_rvals("dev")
prnt_rvals <- function(id) {
ui <- "\n\n# put in UI ----
shiny::verbatimTextOutput(shiny::NS(namespace = id, id = '{id}'))"
server <- "\n\n# put in server ----
output$dev <- shiny::renderPrint({{
nvals <- shiny::reactiveValuesToList(x = input, all.names = TRUE)
print(vals)
}})\n\n"
rstudioapi::insertText(glue::glue(ui, server))
}
prnt_rvals("dev")
prnt_rvals <- function(id) {
ui <- "\n\n# put in UI ----
shiny::verbatimTextOutput(
shiny::NS(namespace = id, id = '{id}')
),"
server <- "\n\n# put in server ----
output$dev <- shiny::renderPrint({{
nvals <- shiny::reactiveValuesToList(x = input, all.names = TRUE)
print(vals)
}})\n\n"
rstudioapi::insertText(glue::glue(ui, server))
}
prnt_rvals("dev")
prnt_rvals <- function(id) {
ui <- "\n\n# put in UI ----
shiny::fluidRow(
shiny::column(width = 12,
shiny::verbatimTextOutput(
shiny::NS(namespace = id, id = '{id}'))
)
)"
server <- "\n\n# put in server ----
output$dev <- shiny::renderPrint({{
nvals <- shiny::reactiveValuesToList(x = input, all.names = TRUE)
print(vals)
}})\n\n"
rstudioapi::insertText(glue::glue(ui, server))
}
prnt_rvals <- function(id) {
ui <- "\n\n# put in UI ----
shiny::fluidRow(
shiny::column(width = 12,
shiny::verbatimTextOutput(
shiny::NS(namespace = id, id = '{id}'))
)
)"
server <- "\n\n# put in server ----
output$dev <- shiny::renderPrint({{
nvals <- shiny::reactiveValuesToList(x = input, all.names = TRUE)
print(vals)
}})\n\n"
rstudioapi::insertText(glue::glue(ui, server))
}
prnt_rvals("dev")
prnt_rvals <- function(id) {
ui <- "\n\n# put in UI ----
shiny::fluidRow(
shiny::column(width = 12,
shiny::verbatimTextOutput(
shiny::NS(namespace = id, id = '{id}'))
)
)"
server <- "\n\n# put in server ----
output$dev <- shiny::renderPrint({{
vals <- shiny::reactiveValuesToList(x = input, all.names = TRUE)
print(vals)
}})\n\n"
rstudioapi::insertText(glue::glue(ui, server))
}
prnt_rvals("dev")
devtools::document()
devtools::load_all()
devtools::load_all()
devtools::document()
library(JSbs4dash)
runApp('dev/navbar-color')
runApp('dev/navbarMenu')
runApp('dev/navbarMenu')
usethis::use_r("navbarTab")
usethis::use_r("navbarMenu")
devtools::load_all()
devtools::document()
runApp('dev/navbarMenu')
runApp('dev/navbarMenu')
library(JSbs4dash)
JSbs4dash::run_app()
runApp('dev/navbarMenu')
usethis::use_r("narbarMenuApp")
library(shiny)
library(bs4Dash)
library(JSbs4dash)
navbarMenuApp <- function() {
ui <- bs4Dash::dashboardPage(
header = bs4Dash::dashboardHeader(title = "navbar",
shiny::div(
JSbs4dash::navbarMenu(
JSbs4dash::navbarTab(tabName = "Tab1", "Tab 1"),
JSbs4dash::navbarTab(tabName = "Tab2", "Tab 2")
)
)
),
body = bs4Dash::dashboardBody(
tabItems(
tabItem(
tabName = "Tab1",
"Tab 1"
),
tabItem(
tabName = "Tab2",
"Tab 2"
)
)
),
sidebar = bs4Dash::dashboardSidebar(
disable = FALSE)
)
server <- function(input, output, session) {
}
shiny::shinyApp(ui, server)
}
navbarMenuApp()
devtools::load_all()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
## code to prepare `movies` dataset goes here
load("inst/extdata/movies.RData")
usethis::use_data(movies, overwrite = TRUE)
devtools::load_all()
library(JSbs4dash)
JSbs4dash::run_app()
devtools::load_all()
devtools::load_all()
devtools::document()
devtools::document()
devtools::document()
devtools::load_all()
library(JSbs4dash)
#' @importFrom bs4Dash dashboardPage
#' @importFrom bs4Dash dashboardHeader
#' @importFrom shiny div
#' @importFrom bs4Dash dashboardBody
#' @importFrom bs4Dash dashboardSidebar
#' @importFrom bs4Dash dashboardControlbar
#'
#' @examples
#' require(JSbs4dash)
#' # navbarMenuApp()
navbarMenuApp <- function() {
ui <- bs4Dash::dashboardPage(
header = bs4Dash::dashboardHeader(title = "navbar",
shiny::div(
JSbs4dash::bs4DNavbarMenu(
JSbs4dash::bs4DNavbarTab(tabName = "Tab1", "Tab 1"),
JSbs4dash::bs4DNavbarTab(tabName = "Tab2", "Tab 2")
)
)
),
body = bs4Dash::dashboardBody(
tabItems(
tabItem(
tabName = "Tab1",
"Tab 1"
),
tabItem(
tabName = "Tab2",
"Tab 2"
)
)
),
sidebar = bs4Dash::dashboardSidebar(
disable = FALSE),
controlbar = bs4Dash::dashboardControlbar(
disable = FALSE)
)
server <- function(input, output, session) {
}
shiny::shinyApp(ui, server)
}
navbarMenuApp()
devtools::load_all()
devtools::document()
library(JSbs4dash)
runApp('dev/navbar')
## code to prepare `movies` dataset goes here
load("inst/extdata/movies.RData")
usethis::use_data(movies, overwrite = TRUE)
library(JSbs4dash)
runApp('dev/navbar')
runApp('dev/navbar')
runApp('dev/tooltips')
usethis::use_r("mod_tooltip_var_input_ui")
devtools::document()
rm(list = c("navbarMenuApp"))
rm(list = c("navbarMenuApp"))
devtools::document()
devtools::load_all()
library(JSbs4dash)
runApp('dev/tooltips')
runApp('dev/tooltips')
runApp('dev/tooltips')
usethis::use_r("toolTipApp")
toolTipApp <- function() {
ui <- shiny::tagList(
shiny::fluidPage(
shiny::tags$h1("JSbs4dash:", code("tooltips")),
shiny::sidebarLayout(
shiny::sidebarPanel(
# use mod_tooltip_var_input_ui -----
mod_tooltip_var_input_ui("vars")
),
shiny::mainPanel(
# add shiny hex in www/
shiny::tags$img(src = "shiny.png"),
JSbs4dash::mod_plot_ui("plot")
)
)
)
)
server <- function(input, output, session) {
# Your application server logic
selected_vars <- JSbs4dash::mod_var_input_server("vars")
JSbs4dash::mod_plot_server("plot", var_inputs = selected_vars)
}
shiny::shinyApp(
ui = ui, server = server)
}
toolTipApp()
devtools::load_all()
devtools::document()
library(JSbs4dash)
toolTipApp()
devtools::load_all()
rm(list = c("toolTipApp"))
devtools::load_all()
devtools::document()
library(JSbs4dash)
toolTipApp()
